#define _CRT_SECURE_NO_WARNINGS // scanf(), gets() (needed for Visual C++)

#include <cassert>

#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <functional>
#include <string>
#include <vector>

using namespace std;

#define MEMSET(x, WITH) memset(x, (WITH), sizeof(x))
#define FOR(i, E) for (int i=0; i<(E); i++)

typedef long long ll;
//const ll MOD = 1000000007;
//const double PI = atan(1) * 4;








tuple<ll, ll, ll> egcd(ll a, ll b) {
	if (b == 0) return make_tuple(a, 1, 0);

	ll q = a/b;
	ll r = a%b;

	ll g, s, t; tie(g, s, t) = egcd(b, r);
	// g = bs + rt = bs + (a-bq)t = at + b(s-qt)
	return make_tuple(g, t, s - q*t);
}

ll gcd(ll a, ll b) {
	return b ? gcd(b, a%b) : a;
}


tuple<ll, ll, ll> egcd2(ll a, ll b) {
	// a*si + b*ti = ri
	
	ll s0 = 1;
	ll t0 = 0;
	ll r0 = a;

	ll s1 = 0;
	ll t1 = 1;
	ll r1 = b;

	

	while (r0 % r1) {
		ll q1 = r0 / r1;

		ll r2 = r0 - q1 * r1;
		ll s2 = s0 - q1 * s1;
		ll t2 = t0 - q1 * t1;
		
		tie(r0, s0, t0) = tie(r1, s1, t1);
		tie(r1, s1, t1) = tie(r2, s2, t2);
	}

	//printf("(%lld %lld) = %lld %lld %lld\n", a, b, r1, s1, t1);
	return make_tuple(r1, s1, t1);
}




int main() {


	const int N = 1000;

	for (int a=1; a<=N; a++) for (int b=1; b<=N; b++) {
		ll g, s, t; 
		tie(g, s, t) = egcd(a, b);
		assert(g == a*s + b*t);
		assert(g == gcd(a, b));
		assert(egcd(a, b) == egcd2(a, b));
	}




}