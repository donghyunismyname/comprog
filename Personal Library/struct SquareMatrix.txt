
struct SquareMatrix : vector<vector<ll>> {
	void print() {
		cout << "[print matrix]" << endl;
		for (int i=0; i<size; i++) {
			for (int j=0; j<size; j++)
				cout << (*this)[i][j] << " ";
			cout << endl;
		}
		cout << endl;
	}

	int size;
	SquareMatrix(int size) : vector<vector<ll>>(size) {
		this->size = size;
		for (int i=0; i<size; i++)
			(*this)[i].resize(size, 0);
	}

	SquareMatrix operator+(const SquareMatrix &rhs) const {
		const SquareMatrix &lhs = *this;
		SquareMatrix ret(size);

		for (int i=0; i<size; i++)
			for (int j=0; j<size; j++)
				ret[i][j] = (lhs[i][j] + rhs[i][j]) % MOD;
		return ret;
	}

	SquareMatrix operator*(const SquareMatrix &rhs) const {
		const SquareMatrix &lhs = *this;
		SquareMatrix ret(size);

		for (int i=0; i<size; i++)
			for (int k=0; k<size; k++)
				for (int j=0; j<size; j++)
					ret[i][j] += lhs[i][k] * rhs[k][j],
					ret[i][j] %= MOD;
		return ret;
	}


	// Iterative implementation
	static SquareMatrix pow(const SquareMatrix &M, const int n) {
		if (n == 0) return SquareMatrix::identity(M.size);

		SquareMatrix prod = M;

		int sh=0; while (n>>sh != 1) sh++;
		while (sh!=0) {
			sh--;
			prod = prod * prod;
			if ((n>>sh) & 1) prod = prod * M;
		}

		return prod;
	}


	/*
	static SquareMatrix power(const SquareMatrix &M, const int n) {
		if (n == 0) return identity(M.size);
		else if (n % 2) return power(M*M, n/2) * M;
		else return power(M*M, n/2);
	}
	*/


	static SquareMatrix identity(const int size) {
		SquareMatrix ret(size);
		for (int i=0; i<size; i++)
			ret[i][i] = 1;
		return ret;
	}
};

