struct RSQ {
// val is considered hang (hanged in the middle in the binary tree for each update query)
// below is considered hangSum (the sum of all hang's below(containing the node itself), weighted by node range)

	const int size;
	vector<int> below;
	vector<int> val;

	RSQ(int sz) : size(sz), below(sz*4, 0), val(sz*4, 0) {}
	RSQ(vector<int> &data) : size(data.size()), below(data.size()*4, 0), val(data.size()*4, 0) {
		init(1, 0, size-1, data);
	}
	void init(int node, int nodeLo, int nodeHi, vector<int> &data) {
		if (nodeLo == nodeHi) {
			val[node] = data[nodeLo];
			below[node] = data[nodeLo];
			return;
		}

		int mid = (nodeLo+nodeHi)/2;
		init(node*2, nodeLo, mid, data);
		init(node*2+1, mid+1, nodeHi, data);
		below[node] =  below[node*2] + below[node*2+1];
	}





	int rangeLo, rangeHi, newVal;

	void add(int lo, int hi, int x) {
		rangeLo = lo;
		rangeHi = hi;
		newVal = x;
		add1(1, 0, size-1);
	}
	void add1(int node, int nodeLo, int nodeHi) {
		if (rangeHi < nodeLo || nodeHi < rangeLo) return;
		if (rangeLo <= nodeLo && nodeHi <= rangeHi) {
			val[node] += newVal;
			below[node] += newVal*(nodeHi-nodeLo+1);
			return;
		}

		int mid = (nodeLo+nodeHi)/2;
		add1(node*2, nodeLo, mid);
		add1(node*2+1, mid+1, nodeHi);
		below[node] = below[node*2] + below[node*2+1] + val[node]*(nodeHi-nodeLo+1);
	}


	int sum(int lo, int hi) {
		rangeLo = lo;
		rangeHi = hi;
		return sum1(1, 0, size-1);
	}
	int sum1(int node, int nodeLo, int nodeHi) const {
		if (rangeHi < nodeLo || nodeHi < rangeLo) return 0;
		if (rangeLo <= nodeLo && nodeHi <= rangeHi) {
			return below[node];
		}

		int mid = (nodeLo+nodeHi)/2;
		return (min(nodeHi, rangeHi) - max(nodeLo, rangeLo) + 1) * val[node]
			+ sum1(node*2, nodeLo, mid)
			+ sum1(node*2+1, mid+1, nodeHi);
	}
};
